var config = require('config');
var cookie = require('cookie');
var dbProxy = require('dbProxy');
var qs = require('querystring');
var unload = require('unload');
var url = require('url');

exports.fit = function (bus, fn) {
    req = bus.req;
    bus.vPath = dealUrl(url.parse(bus.req.url).pathname);
    getBody(bus, fn);
};

var getBody = function (bus, fn) {
    var req = bus.req;

    cookie.init(bus.req, bus.res);
    bus.identity = {};
    bus.identity.ticket = cookie.body.ticket;
    if (bus.identity.ticket) {
        dbProxy.findOne('sInline', { ticket: cookie.body.ticket }, function (err, result) {
            //if (err) bus.identity.code = 'error';
            if (!result) bus.identity.isLogin = false;
            else {
                bus.identity.uid = result.uid;
                bus.identity.cTime = result.cTime;
                bus.identity.uTime = result.uTime;
                bus.identity.isLogin = true;
            }
            loadBody(bus, fn);
        });
    } else
        loadBody(bus, fn);
};

var loadBody = function (bus, fn) {
    var req = bus.req;
    var reqBody = [];
    var postData = '';
    req.addListener('data', function (postDataChunk) {
        postData += postDataChunk;
    });

    req.addListener('end', function () {
        reqBody.push(url.parse(req.url).query);
        reqBody.push(postData.toString());

        // 参数体
        if (!bus.body)
            bus.body = [];
        bus.body = qs.parse(reqBody.join('&'));
        //用户身份
        if (!bus.identity.ticket)
            bus.identity.ticket = bus.body.ticket;
        //回调
        fn(bus);
    });
};

var dealUrl = function (vPath) {
    if (vPath.length === 0) return '';
    if (vPath.lastIndexOf('/') === vPath.length - 1)
        return dealUrl(vPath.substring(0, vPath.length - 1));
    else
        return vPath;
};