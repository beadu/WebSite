var config = require('config');
var fs = require('fs');
var logger = require('logger');
var path = require('path');
var unload = require('unload');

// //
var map = [];

exports.findSync = function (bus, fn) {
    logger.debug('同步方式');
    if (bus.vPath.length == 0) bus.vPath = config.homePage;
    bus.data.file = path.join(bus.basePath, '/view' + bus.vPath);
    if (fs.existsSync(bus.data.file)) return unload.execFileSync(bus);
    else if (map[bus.vPath]) {// 用户配置
        bus.data.file = path.join(bus.basePath, '/controller' + map[bus.vPath]);
        if (fs.existsSync(bus.data.file)) initEngine(bus, fn);
        else autoSync(bus, fn);
    } else {// 自动识别
        autoSync(bus, fn);
    }
};

var autoSync = function (bus, fn) {
    bus.data.file = bus.basePath + '/controller' + bus.vPath + '.js';
    if (fs.existsSync(bus.data.file)) {
        return initEngine(bus, fn);
    } else {
        bus.data.file = bus.basePath + '/controller' + bus.vPath + '/index.js';
        if (fs.existsSync(bus.data.file)) return initEngine(bus, fn);
        return unload.execError(bus, '未提供的服务');
    }
};

exports.find = function (bus, fn) {
    logger.debug('异步方式');
    if (bus.vPath.length == 0) bus.vPath = config.homePage;
    bus.data.file = path.join(bus.basePath, '/view' + bus.vPath);
    fs.stat(bus.data.file, function (err, stat) {
        if (err) {
            return fit(bus, fn);
        }
        if (stat.isFile()) {//静态文件
            logger.debug('静态文件');
            bus.data.file = path.join(bus.basePath, '/view' + bus.vPath);
            return unload.execFile(bus);
        } else {
            return fit(bus, fn);
        }
    });
};

var fit = function (bus, fn) {
    if (map[bus.vPath]) {//用户配置
        bus.data.file = path.join(bus.basePath, '/controller' + map[bus.vPath]);
        fs.exists(bus.data.file, function (exists) {
            if (exists) {
                logger.debug('路由配置');
                bus.data.file = path.join(bus.basePath, '/controller' + map[bus.vPath]);
                return initEngine(bus, fn);
            } else {
                return auto(bus, fn);
            }
        });
    } else {
        return auto(bus, fn);
    }
}

var auto = function (bus, fn) {
    logger.debug('自动识别');
    bus.data.file = bus.basePath + '/controller' + bus.vPath + '.js';
    fs.exists(bus.data.file, function (exists) {
        var jsFile = bus.basePath + '/controller' + bus.vPath + '.js';
        var indexFile = bus.basePath + '/controller' + bus.vPath + '/index.js';
        if (exists) {
            bus.data.file = jsFile;
            return initEngine(bus, fn);
        } else {
            fs.exists(indexFile, function (exists) {
                bus.data.file = indexFile;
                if (exists) return initEngine(bus, fn);
                else return unload.execError(bus, "未提供的服务");
            });
        }
    });
};

var initEngine = function (bus, fn) {
    bus.engine = new require(bus.data.file);
    return fn(bus);
};

var init = function (file) {
    // Read file and split into lines
    var content = fs.readFileSync(file, 'utf-8');
    var lines = content.split(/[\r\n]+/);

    lines.forEach(function (line) {
        // Clean up whitespace/comments, and split into fields
        var rule = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
        if (typeof (rule) === 'object') {
            map[rule.shift()] = rule;
        }
    });
};

init(path.join(__dirname, 'data/rule'));